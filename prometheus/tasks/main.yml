---

# - name: Preflight
#   ansible.builtin.include_tasks:
#     file: preflight.yml
#     apply:
#       become: true
#       tags:
#         - prometheus_configure
#         - prometheus_install
#         - prometheus_run
#   tags:
#     - prometheus_configure
#     - prometheus_install
#     - prometheus_run


# - name: Install
#   ansible.builtin.include_tasks:
#     file: install.yml
#     apply:
#       become: true
#       tags:
#         - prometheus_install
#   tags:
#     - prometheus_install  

# - name: Update apt cache
#   apt: update_cache=yes

- name: Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This module only works with systemd"


- name: Discover latest version
  ansible.builtin.set_fact:
    prometheus_version: "{{ (lookup('url', 'https://api.github.com/repos/prometheus/prometheus/releases/latest', headers=_github_api_headers,
                         split_lines=False) | from_json).get('tag_name') | replace('v', '') }}"
  run_once: true
  until: prometheus_version is version('0.0.0', '>=')
  retries: 10
  when:
    - prometheus_version == "latest"
    - prometheus_binary_local_dir | length == 0
    - not prometheus_skip_install

- name: Get prometheus binary checksum
  when:
    - prometheus_binary_local_dir | length == 0
    - not prometheus_skip_install
  block:
    - name: "Get checksum list"
      ansible.builtin.set_fact:
        __prometheus_checksums: "{{ lookup('url', prometheus_checksums_url, headers=_github_api_headers, wantlist=True) | list }}"
      run_once: true
      until: __prometheus_checksums is search('linux-' + go_arch + '.tar.gz')
      retries: 10

    - name: "Get checksum for {{ go_arch }}"
      ansible.builtin.set_fact:
        __prometheus_checksum: "{{ item.split(' ')[0] }}"
      with_items: "{{ __prometheus_checksums }}"
      when:
        - "('linux-' + go_arch + '.tar.gz') in item"

- name: Create prometheus system group
  ansible.builtin.group:
    name: prometheus
    system: true
    state: present

- name: Create prometheus system user
  ansible.builtin.user:
    name: prometheus
    system: true
    shell: "/usr/sbin/nologin"
    group: prometheus
    createhome: false
    home: "{{ prometheus_db_dir }}"

- name: Create prometheus data directory
  ansible.builtin.file:
    path: "{{ prometheus_db_dir }}"
    state: directory
    owner: prometheus
    group: prometheus
    mode: 0755


- name: Create prometheus configuration directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: prometheus
    mode: 0770
  with_items:
    - "{{ prometheus_config_dir }}"
    - "{{ prometheus_config_dir }}/rules"
    - "{{ prometheus_config_dir }}/file_sd"

- name: Get prometheus binary
  when:
    - prometheus_binary_local_dir | length == 0
    - not prometheus_skip_install
  block:

    - name: Download prometheus binary to local folder
      become: false
      ansible.builtin.get_url:
        url: "{{ prometheus_binary_url }}"
        dest: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        checksum: "sha256:{{ __prometheus_checksum }}"
        mode: 0644
      register: _download_archive
      until: _download_archive is succeeded
      retries: 5
      delay: 2
      # run_once: true # <-- this cannot be set due to multi-arch support
      delegate_to: localhost
      check_mode: false

    - name: Unpack prometheus binaries
      become: false
      ansible.builtin.unarchive:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}.tar.gz"
        dest: "/tmp"
        creates: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/prometheus"
      delegate_to: localhost
      check_mode: false

    - name: Propagate official prometheus and promtool binaries
      ansible.builtin.copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/{{ item }}"
        dest: "{{ _prometheus_binary_install_dir }}/{{ item }}"
        mode: 0755
        owner: root
        group: root
      with_items:
        - prometheus
        - promtool
      notify:
        - restart prometheus

    - name: Propagate official console templates
      ansible.builtin.copy:
        src: "/tmp/prometheus-{{ prometheus_version }}.linux-{{ go_arch }}/{{ item }}/"
        dest: "{{ prometheus_config_dir }}/{{ item }}/"
        mode: 0644
        owner: root
        group: root
      with_items:
        - console_libraries
        - consoles
      notify:
        - restart prometheus


- name: Propagate locally distributed prometheus and promtool binaries
  ansible.builtin.copy:
    src: "{{ prometheus_binary_local_dir }}/{{ item }}"
    dest: "{{ _prometheus_binary_install_dir }}/{{ item }}"
    mode: 0755
    owner: root
    group: root
  with_items:
    - prometheus
    - promtool
  when:
    - prometheus_binary_local_dir | length > 0
    - not prometheus_skip_install
  notify:
    - restart prometheus

# - name: Configure prometheus
#   ansible.builtin.template:
#     src: "{{ prometheus_config_file }}"
#     dest: "{{ prometheus_config_dir }}/prometheus.yml"
#     force: true
#     owner: root
#     group: prometheus
#     mode: 0640    
#   notify:
#     - reload prometheus

- name: Configure prometheus
  ansible.builtin.copy:
    src: "{{ prometheus_config_file }}"
    dest: "{{ prometheus_config_dir }}/prometheus.yml"
    force: true
    mode: 0755
    owner: root
    group: prometheus
    mode: 0640
  notify:
    - reload prometheus  

# - name: Create systemd service unit
#   ansible.builtin.template:
#     src: prometheus.service
#     dest: /etc/systemd/system/prometheus.service
#     owner: root
#     group: root
#     mode: 0644
#   notify:
#     - restart prometheus

- name: Create systemd service unit
  ansible.builtin.copy:
    src: prometheus.service
    dest: /etc/systemd/system/prometheus.service
    force: true
    mode: 0755
    owner: root
    group: root
    mode: 0644
  notify:
    - restart prometheus

- name: Ensure prometheus service is started and enabled
  become: true
  ansible.builtin.systemd:
    daemon_reload: true
    name: prometheus
    state: started
    enabled: true
  tags:
    - prometheus_run